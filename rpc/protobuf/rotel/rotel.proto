syntax = "proto3";
package gopi;

import "google/protobuf/empty.proto";

// The gaffer service definition
service Rotel {
    // Simple ping method to show server is "up"
    rpc Ping (google.protobuf.Empty) returns (google.protobuf.Empty);

    // Return information
    rpc Info(google.protobuf.Empty) returns (RotelInfo);

    // Get and set state
    rpc Get(google.protobuf.Empty) returns (RotelState);
    rpc Set(RotelState) returns (google.protobuf.Empty);

    // Send commands
    rpc Send(RotelCommand) returns (google.protobuf.Empty);

    // Stream change events
    rpc StreamEvents (google.protobuf.Empty) returns (stream RotelEvent); 
}

// Information
message RotelInfo {
    string model = 1;
}

// Monitor discovery changes
message RotelEvent {
    enum Type {
        EVENT_NONE = 0;
        EVENT_POWER = 1;
        EVENT_VOLUME = 2;
        EVENT_SOURCE = 3;
        EVENT_MUTE = 4;
        EVENT_FREQ = 5;
        EVENT_BYPASS = 6;
        EVENT_BASS = 7;
        EVENT_TREBLE = 8;
        EVENT_BALANCE = 9;
        EVENT_SPEAKER = 10;
        EVENT_DIMMER = 11;
        EVENT_UPDATE = 12;
    }

    Type type = 1;
    RotelState state = 2;
}

message RotelState {
    enum Power {
        POWER_NONE = 0;
        POWER_ON = 1;
        POWER_STANDBY = 2;
    }
    enum Source {
        SOURCE_NONE = 0;
        SOURCE_CD = 1;
        SOURCE_COAX1 = 2;
        SOURCE_COAX2 = 3;
        SOURCE_OPT1 = 4;
        SOURCE_OPT2 = 5;
        SOURCE_AUX1 = 6;
        SOURCE_AUX2 = 7;
        SOURCE_TUNER = 8;
        SOURCE_PHONO = 9;
        SOURCE_USB = 10;
        SOURCE_BLUETOOTH = 11;
        SOURCE_PC_USB = 12;
        SOURCE_OTHER = 13;
    }
    enum Volume {
        VOLUME_NONE = 0;
    }
    enum Mute {
        MUTE_NONE = 0;
        MUTE_OFF = 1;
        MUTE_ON = 2;
    }
    enum Bypass {
        BYPASS_NONE = 0;
        BYPASS_ON = 1;
        BYPASS_OFF = 2;
    }
    enum Tone {
        TONE_NONE = 0;
        TONE_OFF = 101;
    }
    enum Balance {
        BALANCE_NONE = 0;
        BALANCE_OFF = 16;
    }
    enum Speaker {
        SPEAKER_NONE = 0;
        SPEAKER_A = 1;
        SPEAKER_B = 2;
        SPEAKER_ALL = 3;
        SPEAKER_OFF = 4;
    }
    enum Dimmer {
        DIMMER_NONE = 0;      
        DIMMER_MIN = 1;
        DIMMER_MAX = 9;
        DIMMER_OFF = 10;  
    }
    enum Update {
        UPDATE_NONE = 0;      
        UPDATE_MANUAL = 1;
        UPDATE_AUTO = 2;
    }

    Power power = 1;
    Volume volume = 2;
    Source source = 3;
    Mute mute = 4;
    string Freq = 5;
    Bypass bypass = 6;
    Tone bass = 7;
    Tone treble = 8;
    Balance balance = 9;
    Speaker speaker = 10;
    Dimmer dimmer = 11;
    Update update = 12;
}

message RotelCommand {
    enum Command {
        COMMAND_NONE = 0;
        COMMAND_PLAY = 1;
        COMMAND_STOP = 2;
        COMMAND_PAUSE = 3;
        COMMAND_TRACK_NEXT = 4;
        COMMAND_TRACK_PREV = 5;
        COMMAND_MUTE_TOGGLE = 6;
        COMMAND_VOL_UP = 7;
        COMMAND_VOL_DOWN = 8;
        COMMAND_BASS_UP = 9;
        COMMAND_BASS_DOWN = 10;
        COMMAND_BASS_RESET = 11;
        COMMAND_TREBLE_UP = 12;
        COMMAND_TREBLE_DOWN = 13;
        COMMAND_TREBLE_RESET = 14;
        COMMAND_BALANCE_LEFT = 15;
        COMMAND_BALANCE_RIGHT = 16;
        COMMAND_BALANCE_RESET = 17;
        COMMAND_SPEAKER_A_TOGGLE = 18;
        COMMAND_SPEAKER_B_TOGGLE = 19;
        COMMAND_DIMMER_TOGGLE = 20;
        COMMAND_POWER_TOGGLE = 21;
    }
    Command command = 1;
}
