/*
	Rotel RS232 Control
	(c) Copyright David Thorpe 2019
	All Rights Reserved
	For Licensing and Usage information, please see LICENSE file
*/

// Rotel RS232 Control
package rotel

import (
	// Frameworks
	"fmt"

	"github.com/djthorpe/gopi"
)

////////////////////////////////////////////////////////////////////////////////
// TYPES

type (
	Power     uint16
	Volume    uint16
	Source    uint16
	Command   uint16
	EventType uint16
)

const (
	ROTEL_POWER_NONE Power = 0
	ROTEL_POWER_ON   Power = iota
	ROTEL_POWER_STANDY
	ROTEL_POWER_TOGGLE
	ROTEL_POWER_OTHER
	ROTEL_POWER_MAX = ROTEL_POWER_OTHER
)

const (
	ROTEL_SOURCE_NONE Source = 0
	ROTEL_SOURCE_CD   Source = iota
	ROTEL_SOURCE_COAX1
	ROTEL_SOURCE_COAX2
	ROTEL_SOURCE_OPT1
	ROTEL_SOURCE_OPT2
	ROTEL_SOURCE_AUX1
	ROTEL_SOURCE_AUX2
	ROTEL_SOURCE_TUNER
	ROTEL_SOURCE_PHONO
	ROTEL_SOURCE_USB
	ROTEL_SOURCE_BLUETOOTH
	ROTEL_SOURCE_PC_USB
	ROTEL_SOURCE_OTHER
	ROTEL_SOURCE_MAX = ROTEL_SOURCE_OTHER
)

const (
	ROTEL_VOLUME_NONE Volume = 0
	ROTEL_VOLUME_MAX  Volume = 96
)

const (
	ROTEL_COMMAND_NONE Command = 0
	ROTEL_COMMAND_PLAY Command = iota
	ROTEL_COMMAND_STOP
	ROTEL_COMMAND_PAUSE
	ROTEL_COMMAND_TRACK_NEXT
	ROTEL_COMMAND_TRACK_PREV
	ROTEL_COMMAND_MUTE_OFF
	ROTEL_COMMAND_MUTE_ON
	ROTEL_COMMAND_MUTE_TOGGLE
	ROTEL_COMMAND_BYPASS_OFF
	ROTEL_COMMAND_BYPASS_ON
	ROTEL_COMMAND_BASS_UP
	ROTEL_COMMAND_BASS_DOWN
	ROTEL_COMMAND_BASS_RESET
	ROTEL_COMMAND_TREBLE_UP
	ROTEL_COMMAND_TREBLE_DOWN
	ROTEL_COMMAND_TREBLE_RESET
	ROTEL_COMMAND_BALANCE_LEFT
	ROTEL_COMMAND_BALANCE_RIGHT
	ROTEL_COMMAND_BALANCE_RESET
	ROTEL_COMMAND_SPEAKER_A_TOGGLE
	ROTEL_COMMAND_SPEAKER_B_TOGGLE
	ROTEL_COMMAND_SPEAKER_A_ON
	ROTEL_COMMAND_SPEAKER_A_OFF
	ROTEL_COMMAND_SPEAKER_B_ON
	ROTEL_COMMAND_SPEAKER_B_OFF
	ROTEL_COMMAND_DIMMER_TOGGLE
	ROTEL_COMMAND_DIMMER_0
	ROTEL_COMMAND_DIMMER_1
	ROTEL_COMMAND_DIMMER_2
	ROTEL_COMMAND_DIMMER_3
	ROTEL_COMMAND_DIMMER_4
	ROTEL_COMMAND_DIMMER_5
	ROTEL_COMMAND_DIMMER_6
	ROTEL_COMMAND_RS232_UPDATE_ON
	ROTEL_COMMAND_RS232_UPDATE_OFF
	ROTAL_COMMAND_MAX = ROTEL_COMMAND_RS232_UPDATE_OFF
)

const (
	EVENT_TYPE_NONE  EventType = 0
	EVENT_TYPE_POWER EventType = iota
	EVENT_TYPE_VOLUME
	EVENT_TYPE_INPUT
)

////////////////////////////////////////////////////////////////////////////////
// INTERFACES

type Rotel interface {
	gopi.Driver
	gopi.Publisher

	// Get parameters
	Model() string
	Power() Power
	Volume() Volume
	Input() Source

	// Set parameters
	SetPower(Power) error
	SetVolume(Volume) error
	SetInput(Source) error

	// Send Command
	SendCommand(Command) error
}

type RotelEvent interface {
	gopi.Event
}

type RotelState struct {
	Model string
	Power
	Volume
	Source
}

type RotelClient interface {
	// Ping remote service
	Ping() error

	// Get and set state
	Get() (RotelState, error)
	Set(RotelState) error
}

////////////////////////////////////////////////////////////////////////////////
// STRINGIFY

func (p Power) String() string {
	switch p {
	case ROTEL_POWER_NONE:
		return "ROTEL_POWER_NONE"
	case ROTEL_POWER_ON:
		return "ROTEL_POWER_ON"
	case ROTEL_POWER_STANDY:
		return "ROTEL_POWER_STANDY"
	case ROTEL_POWER_TOGGLE:
		return "ROTEL_POWER_TOGGLE"
	case ROTEL_POWER_OTHER:
		return "ROTEL_POWER_OTHER"
	default:
		return "[?? Invalid Power value]"
	}
}

func (v Volume) String() string {
	if v == ROTEL_VOLUME_NONE {
		return "ROTEL_VOLUME_NONE"
	} else if v == ROTEL_VOLUME_MAX {
		return "ROTEL_VOLUME_MAX"
	} else if v < ROTEL_VOLUME_MAX {
		return fmt.Sprintf("ROTEL_VOLUME_%d", v)
	} else {
		return "[?? Invalid Volume value]"
	}
}

func (s Source) String() string {
	switch s {
	case ROTEL_SOURCE_NONE:
		return "ROTEL_SOURCE_NONE"
	case ROTEL_SOURCE_CD:
		return "ROTEL_SOURCE_CD"
	case ROTEL_SOURCE_COAX1:
		return "ROTEL_SOURCE_COAX1"
	case ROTEL_SOURCE_COAX2:
		return "ROTEL_SOURCE_COAX2"
	case ROTEL_SOURCE_OPT1:
		return "ROTEL_SOURCE_OPT1"
	case ROTEL_SOURCE_OPT2:
		return "ROTEL_SOURCE_OPT2"
	case ROTEL_SOURCE_AUX1:
		return "ROTEL_SOURCE_AUX1"
	case ROTEL_SOURCE_AUX2:
		return "ROTEL_SOURCE_AUX2"
	case ROTEL_SOURCE_TUNER:
		return "ROTEL_SOURCE_TUNER"
	case ROTEL_SOURCE_PHONO:
		return "ROTEL_SOURCE_PHONO"
	case ROTEL_SOURCE_USB:
		return "ROTEL_SOURCE_USB"
	case ROTEL_SOURCE_BLUETOOTH:
		return "ROTEL_SOURCE_BLUETOOTH"
	case ROTEL_SOURCE_PC_USB:
		return "ROTEL_SOURCE_PC_USB"
	case ROTEL_SOURCE_OTHER:
		return "ROTEL_SOURCE_OTHER"
	default:
		return "[?? Invalid Source value]"
	}
}

func (c Command) String() string {
	switch c {
	case ROTEL_COMMAND_NONE:
		return "ROTEL_COMMAND_NONE"
	case ROTEL_COMMAND_PLAY:
		return "ROTEL_COMMAND_PLAY"
	case ROTEL_COMMAND_STOP:
		return "ROTEL_COMMAND_STOP"
	case ROTEL_COMMAND_PAUSE:
		return "ROTEL_COMMAND_PAUSE"
	case ROTEL_COMMAND_TRACK_NEXT:
		return "ROTEL_COMMAND_TRACK_NEXT"
	case ROTEL_COMMAND_TRACK_PREV:
		return "ROTEL_COMMAND_TRACK_PREV"
	case ROTEL_COMMAND_MUTE_OFF:
		return "ROTEL_COMMAND_MUTE_OFF"
	case ROTEL_COMMAND_MUTE_ON:
		return "ROTEL_COMMAND_MUTE_ON"
	case ROTEL_COMMAND_MUTE_TOGGLE:
		return "ROTEL_COMMAND_MUTE_TOGGLE"
	case ROTEL_COMMAND_BYPASS_OFF:
		return "ROTEL_COMMAND_BYPASS_OFF"
	case ROTEL_COMMAND_BYPASS_ON:
		return "ROTEL_COMMAND_BYPASS_ON"
	case ROTEL_COMMAND_BASS_UP:
		return "ROTEL_COMMAND_BASS_UP"
	case ROTEL_COMMAND_BASS_DOWN:
		return "ROTEL_COMMAND_BASS_DOWN"
	case ROTEL_COMMAND_BASS_RESET:
		return "ROTEL_COMMAND_BASS_RESET"
	case ROTEL_COMMAND_TREBLE_UP:
		return "ROTEL_COMMAND_TREBLE_UP"
	case ROTEL_COMMAND_TREBLE_DOWN:
		return "ROTEL_COMMAND_TREBLE_DOWN"
	case ROTEL_COMMAND_TREBLE_RESET:
		return "ROTEL_COMMAND_TREBLE_RESET"
	case ROTEL_COMMAND_BALANCE_LEFT:
		return "ROTEL_COMMAND_BALANCE_LEFT"
	case ROTEL_COMMAND_BALANCE_RIGHT:
		return "ROTEL_COMMAND_BALANCE_RIGHT"
	case ROTEL_COMMAND_BALANCE_RESET:
		return "ROTEL_COMMAND_BALANCE_RESET"
	case ROTEL_COMMAND_SPEAKER_A_TOGGLE:
		return "ROTEL_COMMAND_SPEAKER_A_TOGGLE"
	case ROTEL_COMMAND_SPEAKER_B_TOGGLE:
		return "ROTEL_COMMAND_SPEAKER_B_TOGGLE"
	case ROTEL_COMMAND_SPEAKER_A_ON:
		return "ROTEL_COMMAND_SPEAKER_A_ON"
	case ROTEL_COMMAND_SPEAKER_A_OFF:
		return "ROTEL_COMMAND_SPEAKER_A_OFF"
	case ROTEL_COMMAND_SPEAKER_B_ON:
		return "ROTEL_COMMAND_SPEAKER_B_ON"
	case ROTEL_COMMAND_SPEAKER_B_OFF:
		return "ROTEL_COMMAND_SPEAKER_B_OFF"
	case ROTEL_COMMAND_DIMMER_TOGGLE:
		return "ROTEL_COMMAND_DIMMER_TOGGLE"
	case ROTEL_COMMAND_DIMMER_0:
		return "ROTEL_COMMAND_DIMMER_0"
	case ROTEL_COMMAND_DIMMER_1:
		return "ROTEL_COMMAND_DIMMER_1"
	case ROTEL_COMMAND_DIMMER_2:
		return "ROTEL_COMMAND_DIMMER_2"
	case ROTEL_COMMAND_DIMMER_3:
		return "ROTEL_COMMAND_DIMMER_3"
	case ROTEL_COMMAND_DIMMER_4:
		return "ROTEL_COMMAND_DIMMER_4"
	case ROTEL_COMMAND_DIMMER_5:
		return "ROTEL_COMMAND_DIMMER_5"
	case ROTEL_COMMAND_DIMMER_6:
		return "ROTEL_COMMAND_DIMMER_6"
	case ROTEL_COMMAND_RS232_UPDATE_ON:
		return "ROTEL_COMMAND_RS232_UPDATE_ON"
	case ROTEL_COMMAND_RS232_UPDATE_OFF:
		return "ROTEL_COMMAND_RS232_UPDATE_OFF"
	default:
		return "[?? Invalid Command value]"
	}
}
